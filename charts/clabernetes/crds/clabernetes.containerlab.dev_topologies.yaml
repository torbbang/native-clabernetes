---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: topologies.clabernetes.containerlab.dev
spec:
  group: clabernetes.containerlab.dev
  names:
    kind: Topology
    listKind: TopologyList
    plural: topologies
    singular: topology
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.kind
      name: Kind
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.topologyReady
      name: Ready
      type: boolean
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          Topology is an object that holds information about a clabernetes Topology -- that is, a valid
          topology file (ex: containerlab topology), and any associated configurations.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: TopologySpec is the spec for a Topology resource.
            properties:
              connectivity:
                default: vxlan
                description: |-
                  Connectivity defines the type of connectivity to use between nodes in the topology. The
                  default behavior is to use vxlan tunnels.
                enum:
                - vxlan
                type: string
              definition:
                description: |-
                  Definition defines the actual set of nodes (network ones, not k8s ones!) that this Topology
                  CR represents. This means Topology holds a "normal" containerlab topology file that will be
                  "clabernetsified".
                properties:
                  containerlab:
                    description: Containerlab holds a valid containerlab topology.
                    type: string
                type: object
              deployment:
                description: |-
                  Deployment holds configurations relevant to how clabernetes configures deployments that make
                  up a given topology.
                properties:
                  containerlabDebug:
                    description: |-
                      ContainerlabDebug sets the `--debug` flag when invoking containerlab in the launcher pods.
                      This is disabled by default. If this value is unset, the global config value (default of
                      "false") will be used.
                    type: boolean
                  containerlabTimeout:
                    description: |-
                      ContainerlabTimeout sets the `--timeout` flag when invoking containerlab in the launcher
                      pods.
                    type: string
                  containerlabVersion:
                    description: |-
                      ContainerlabVersion sets a custom version to use for containerlab -- when set this will cause
                      the launcher pods to download and use this specific version of containerlab. Setting a bad
                      version (version that doesnt exist/typo/etc.) will cause pods to fail to launch, so be
                      careful! You never "need" to this as the publicly available launcher image will always be
                      built with a (reasonably) up to date containerlab version, this setting exists in case you
                      want to pin back to an older version for some reason or you want to be bleeding edge with
                      some new feature (but do note that just because it exists in containerlab doesnt
                      *necessarily* mean it will be auto-working in clabernetes!
                    type: string
                  extraEnv:
                    description: |-
                      ExtraEnv is a list of additional environment variables to set on the launcher container. The
                      values here override any configured global config extra envs!
                    items:
                      description: EnvVar represents an environment variable present
                        in a Container.
                      properties:
                        name:
                          description: Name of the environment variable. Must be a
                            C_IDENTIFIER.
                          type: string
                        value:
                          description: |-
                            Variable references $(VAR_NAME) are expanded
                            using the previously defined environment variables in the container and
                            any service environment variables. If a variable cannot be resolved,
                            the reference in the input string will be unchanged. Double $$ are reduced
                            to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
                            "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
                            Escaped references will never be expanded, regardless of whether the variable
                            exists or not.
                            Defaults to "".
                          type: string
                        valueFrom:
                          description: Source for the environment variable's value.
                            Cannot be used if value is not empty.
                          properties:
                            configMapKeyRef:
                              description: Selects a key of a ConfigMap.
                              properties:
                                key:
                                  description: The key to select.
                                  type: string
                                name:
                                  default: ""
                                  description: |-
                                    Name of the referent.
                                    This field is effectively required, but due to backwards compatibility is
                                    allowed to be empty. Instances of this type with an empty value here are
                                    almost certainly wrong.
                                    More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                  type: string
                                optional:
                                  description: Specify whether the ConfigMap or its
                                    key must be defined
                                  type: boolean
                              required:
                              - key
                              type: object
                              x-kubernetes-map-type: atomic
                            fieldRef:
                              description: |-
                                Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
                                spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                              properties:
                                apiVersion:
                                  description: Version of the schema the FieldPath
                                    is written in terms of, defaults to "v1".
                                  type: string
                                fieldPath:
                                  description: Path of the field to select in the
                                    specified API version.
                                  type: string
                              required:
                              - fieldPath
                              type: object
                              x-kubernetes-map-type: atomic
                            resourceFieldRef:
                              description: |-
                                Selects a resource of the container: only resources limits and requests
                                (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                              properties:
                                containerName:
                                  description: 'Container name: required for volumes,
                                    optional for env vars'
                                  type: string
                                divisor:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: Specifies the output format of the
                                    exposed resources, defaults to "1"
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                resource:
                                  description: 'Required: resource to select'
                                  type: string
                              required:
                              - resource
                              type: object
                              x-kubernetes-map-type: atomic
                            secretKeyRef:
                              description: Selects a key of a secret in the pod's
                                namespace
                              properties:
                                key:
                                  description: The key of the secret to select from.  Must
                                    be a valid secret key.
                                  type: string
                                name:
                                  default: ""
                                  description: |-
                                    Name of the referent.
                                    This field is effectively required, but due to backwards compatibility is
                                    allowed to be empty. Instances of this type with an empty value here are
                                    almost certainly wrong.
                                    More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                  type: string
                                optional:
                                  description: Specify whether the Secret or its key
                                    must be defined
                                  type: boolean
                              required:
                              - key
                              type: object
                              x-kubernetes-map-type: atomic
                          type: object
                      required:
                      - name
                      type: object
                    type: array
                    x-kubernetes-list-type: atomic
                  filesFromConfigMap:
                    additionalProperties:
                      items:
                        description: |-
                          FileFromConfigMap represents a file that you would like to mount (from a configmap) in the
                          launcher pod for a given node.
                        properties:
                          configMapName:
                            description: ConfigMapName is the name of the configmap
                              to mount.
                            type: string
                          configMapPath:
                            description: |-
                              ConfigMapPath is the path/key in the configmap to mount, if not specified the configmap will
                              be mounted without a sub-path.
                            type: string
                          filePath:
                            description: FilePath is the path to mount the file.
                            type: string
                          mode:
                            default: read
                            description: |-
                              Mode sets the file permissions when mounting the configmap. Since the configmap will be read
                              only filesystem anyway, we basically just want to expose if the file should be mounted as
                              executable or not. So, default permissions would be 0o444 (read) and execute would be 0o555.
                            enum:
                            - read
                            - execute
                            type: string
                        required:
                        - configMapName
                        - filePath
                        type: object
                      type: array
                    description: |-
                      FilesFromConfigMap is a slice of FileFromConfigMap that define the configmap/path and node
                      and path on a launcher node that the file should be mounted to. If the path is not provided
                      the configmap is mounted in its entirety (like normal k8s things), so you *probably* want
                      to specify the sub path unless you are sure what you're doing!
                    type: object
                  filesFromURL:
                    additionalProperties:
                      items:
                        description: |-
                          FileFromURL represents a file that you would like to mount from a URL in the launcher pod for
                          a given node.
                        properties:
                          filePath:
                            description: FilePath is the path to mount the file.
                            type: string
                          url:
                            description: |-
                              URL is the url to fetch and mount at the provided FilePath. This URL must be a url that can
                              be simply downloaded and dumped to disk -- meaning a normal file server type endpoint or if
                              using GitHub or similar a "raw" path.
                            type: string
                        required:
                        - filePath
                        - url
                        type: object
                      type: array
                    description: |-
                      FilesFromURL is a mapping of FileFromURL that define a URL at which to fetch a file, and path
                      on a launcher node that the file should be downloaded to. This is useful for configs that are
                      larger than the ConfigMap (etcd) 1Mb size limit.
                    type: object
                  launcherImage:
                    description: |-
                      LauncherImage sets the default launcher image to use when spawning launcher deployments for
                      this Topology. This is optional, the launcher image will default to whatever is set in the
                      global config CR.
                    type: string
                  launcherImagePullPolicy:
                    description: |-
                      LauncherImagePullPolicy sets the default launcher image pull policy to use when spawning
                      launcher deployments for this Topology. This is also optional and defaults to whatever is set
                      in the global config CR (typically "IfNotPresent"). Note: omitempty because empty str does
                      not satisfy enum of course.
                    enum:
                    - IfNotPresent
                    - Always
                    - Never
                    type: string
                  launcherLogLevel:
                    description: |-
                      LauncherLogLevel sets the launcher clabernetes worker log level -- this overrides whatever
                      is set on the controllers env vars for this topology. Note: omitempty because empty str does
                      not satisfy enum of course.
                    enum:
                    - disabled
                    - critical
                    - warn
                    - info
                    - debug
                    type: string
                  persistence:
                    description: |-
                      Persistence holds configurations relating to persisting each nodes working containerlab
                      directory.
                    properties:
                      claimSize:
                        description: |-
                          ClaimSize is the size of the PVC for this topology -- if not provided this defaults to 5Gi.
                          If provided, the string value must be a valid kubernetes storage requests style string. Note
                          the claim size *cannot be made smaller* once created, but it *can* be expanded. If you need
                          to make the claim smaller you must delete the topology (or the node from the topology) and
                          re-add it.
                        type: string
                      enabled:
                        description: |-
                          Enabled indicates if persistence of hte containerlab lab/working directory will be placed in
                          a mounted PVC.
                        type: boolean
                      storageClassName:
                        description: |-
                          StorageClassName is the storage class to set in the PVC -- if not provided this will be left
                          empty which will end up using your default storage class. Note that currently we assume you
                          have (as default) or provide a dynamically provisionable storage class, hence no selector.
                        type: string
                    required:
                    - enabled
                    type: object
                  privilegedLauncher:
                    description: |-
                      PrivilegedLauncher, when true, sets the launcher containers to privileged. Historically we
                      tried very hard to *not* need to set privileged mode on pods, however the reality is it is
                      much, much easier to get various network operating system images booting with this enabled,
                      so, the default mode is to set the privileged flag on pods. Disabling this option causes
                      clabernetes to try to run the pods for this topology in the "not so privileged" mode -- this
                      basically means we mount all capabilities we think should be available, set apparmor to
                      "unconfined", and mount paths like /dev/kvm and dev/net/tun. With this "not so privileged"
                      mode, Nokia SRL devices and Arista cEOS devices have been able to boot on some clusters, but
                      your mileage may vary. In short: if you don't care about having some privileged pods, just
                      leave this alone.
                    type: boolean
                  resources:
                    additionalProperties:
                      description: ResourceRequirements describes the compute resource
                        requirements.
                      properties:
                        claims:
                          description: |-
                            Claims lists the names of resources, defined in spec.resourceClaims,
                            that are used by this container.

                            This is an alpha field and requires enabling the
                            DynamicResourceAllocation feature gate.

                            This field is immutable. It can only be set for containers.
                          items:
                            description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                            properties:
                              name:
                                description: |-
                                  Name must match the name of one entry in pod.spec.resourceClaims of
                                  the Pod where this field is used. It makes that resource available
                                  inside a container.
                                type: string
                              request:
                                description: |-
                                  Request is the name chosen for a request in the referenced claim.
                                  If empty, everything from the claim is made available, otherwise
                                  only the result of this request.
                                type: string
                            required:
                            - name
                            type: object
                          type: array
                          x-kubernetes-list-map-keys:
                          - name
                          x-kubernetes-list-type: map
                        limits:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: |-
                            Limits describes the maximum amount of compute resources allowed.
                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: |-
                            Requests describes the minimum amount of compute resources required.
                            If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                            otherwise to an implementation-defined value. Requests cannot exceed Limits.
                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          type: object
                      type: object
                    description: |-
                      Resources is a mapping of nodeName (or "default") to kubernetes resource requirements -- any
                      value set here overrides the "global" config resource definitions. If a key "default" is set,
                      those resource values will be preferred over *all global settings* for this topology --
                      meaning, the "global" resource settings will never be looked up for this topology, and any
                      kind/type that is *not* in this resources map will have the "default" resources from this
                      mapping applied.
                    type: object
                  scheduling:
                    description: |-
                      Scheduling holds information about how the launcher pod(s) should be configured with respect
                      to "scheduling" things (affinity/node selector/tolerations).
                    properties:
                      nodeSelector:
                        additionalProperties:
                          type: string
                        description: |-
                          NodeSelector sets the node selector that will be configured on all launcher pods for this
                          Topology.
                        type: object
                      tolerations:
                        description: Tolerations is a list of Tolerations that will
                          be set on the launcher pod spec.
                        items:
                          description: |-
                            The pod this Toleration is attached to tolerates any taint that matches
                            the triple <key,value,effect> using the matching operator <operator>.
                          properties:
                            effect:
                              description: |-
                                Effect indicates the taint effect to match. Empty means match all taint effects.
                                When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: |-
                                Key is the taint key that the toleration applies to. Empty means match all taint keys.
                                If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                              type: string
                            operator:
                              description: |-
                                Operator represents a key's relationship to the value.
                                Valid operators are Exists and Equal. Defaults to Equal.
                                Exists is equivalent to wildcard for value, so that a pod can
                                tolerate all taints of a particular category.
                              type: string
                            tolerationSeconds:
                              description: |-
                                TolerationSeconds represents the period of time the toleration (which must be
                                of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
                                it is not set, which means tolerate the taint forever (do not evict). Zero and
                                negative values will be treated as 0 (evict immediately) by the system.
                              format: int64
                              type: integer
                            value:
                              description: |-
                                Value is the taint value the toleration matches to.
                                If the operator is Exists, the value should be empty, otherwise just a regular string.
                              type: string
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                    type: object
                type: object
              expose:
                description: Expose holds configurations relevant to how clabernetes
                  exposes a topology.
                properties:
                  disableAutoExpose:
                    description: |-
                      DisableAutoExpose disables the automagic exposing of ports for a given topology. When this
                      setting is disabled clabernetes will not auto add ports so if you want to expose (via a
                      load balancer service) you will need to have ports outlined in your containerlab config
                      (or equivalent for kne). When this is `false` (default), clabernetes will add and expose the
                      following list of ports to whatever ports you have already defined:

                      21    - tcp - ftp
                      22    - tcp - ssh
                      23    - tcp - telnet
                      80    - tcp - http
                      161   - udp - snmp
                      443   - tcp - https
                      830   - tcp - netconf (over ssh)
                      5000  - tcp - telnet for vrnetlab qemu host
                      5900  - tcp - vnc
                      6030  - tcp - gnmi (arista default)
                      9339  - tcp - gnmi/gnoi
                      9340  - tcp - gribi
                      9559  - tcp - p4rt
                      57400 - tcp - gnmi (nokia srl/sros default)

                      This setting is *ignored completely* if `DisableExpose` is true!
                    type: boolean
                  disableExpose:
                    description: |-
                      DisableExpose indicates if exposing nodes via LoadBalancer service should be disabled, by
                      default any mapped ports in a containerlab topology will be exposed.
                    type: boolean
                  exposeType:
                    default: LoadBalancer
                    description: |-
                      ExposeType configures the service type(s) related to exposing the topology. This is an enum
                      that has the following valid values:
                      - None: expose is *not* disabled, but we just don't create any services related to the pods,
                              you may want to do this if you want to tickle the pods by pod name directly for some
                              reason while not having extra services floating around.
                      - ClusterIP: a clusterip service is created so you can hit that service name for the pods.
                      - LoadBalancer: (default) creates a load balancer service so you can access your pods from
                              outside the cluster. this is/was the only behavior up to v0.2.4.
                    enum:
                    - None
                    - ClusterIP
                    - LoadBalancer
                    type: string
                  useNodeMgmtIpv4Address:
                    description: |-
                      UseNodeMgmtIpv4Address, when set to true, the controller will look up each node’s management
                      IPv4 address (from the `mgmt-ipv4` field in your containerlab topology) and assign
                      that address to `Service.spec.loadBalancerIP` on the corresponding LoadBalancer
                      Service.
                      - Only applies if `spec.expose.exposeType` is `LoadBalancer`.
                      - If the IP is missing or fails validation, a warning is emitted and Kubernetes
                        will allocate an IP automatically.
                    type: boolean
                  useNodeMgmtIpv6Address:
                    description: |-
                      UseNodeMgmtIpv6Address, when set to true, the controller will look up each node’s management
                      IPv6 address (from the `mgmt-ipv6` field in your containerlab topology) and assign
                      that address to `Service.spec.loadBalancerIP` on the corresponding LoadBalancer
                      Service.
                      - Only applies if `spec.expose.exposeType` is `LoadBalancer`.
                      - If the IP is missing or fails validation, a warning is emitted and Kubernetes
                      will allocate an IP automatically.
                    type: boolean
                type: object
              imagePull:
                description: |-
                  ImagePull holds configurations relevant to how clabernetes launcher pods handle pulling
                  images.
                properties:
                  dockerConfig:
                    description: |-
                      DockerConfig allows for setting the docker user (for root) config for all launchers in this
                      topology. The secret *must be present in the namespace of this topology*. The secret *must*
                      contain a key "config.json" -- as this secret will be mounted to /root/.docker/config.json
                      and as such wil be utilized when doing docker-y things -- this means you can put auth things
                      in here in the event your cluster doesn't support the preferred image pull through option.
                    type: string
                  dockerDaemonConfig:
                    description: |-
                      DockerDaemonConfig allows for setting the docker daemon config for all launchers in this
                      topology. The secret *must be present in the namespace of this topology*. The secret *must*
                      contain a key "daemon.json" -- as this secret will be mounted to /etc/docker and docker will
                      be expecting the config at /etc/docker/daemon.json.
                    type: string
                  insecureRegistries:
                    description: |-
                      InsecureRegistries is a slice of strings of insecure registries to configure in the launcher
                      pods.
                    items:
                      type: string
                    type: array
                  pullSecrets:
                    description: |-
                      PullSecrets allows for providing secret(s) to use when pulling the image. This is only
                      applicable *if* ImagePullThrough mode is auto or always. The secret is used by the launcher
                      pod to pull the image via the cluster CRI. The secret is *not* mounted to the pod, but
                      instead is used in conjunction with a job that spawns a pod using the specified secret. The
                      job will kill the pod as soon as the image has been pulled -- we do this because we don't
                      care if the pod runs, we only care that the image gets pulled on a specific node. Note that
                      just like "normal" pull secrets, the secret needs to be in the namespace that the topology
                      is in.
                    items:
                      type: string
                    type: array
                    x-kubernetes-list-type: set
                  pullThroughOverride:
                    description: |-
                      PullThroughOverride allows for overriding the image pull through mode for this
                      particular topology.
                    enum:
                    - auto
                    - always
                    - never
                    type: string
                type: object
              naming:
                default: global
                description: |-
                  Naming tells the clabernetes controller how it should name resources it creates -- that is
                  whether it should include the containerlab topology name as a prefix on resources spawned
                  from this Topology or not; this includes the actual (containerlab) node Deployment(s), as
                  well as the Service(s) for the Topology. This setting has three modes; "prefixed" -- which of
                  course includes the containerlab topology name as a prefix, "non-prefixed" which does *not*
                  include the containerlab topology name as a prefix, and "global" which defers to the global
                  config setting for this (which defaults to "prefixed").
                  "non-prefixed" mode should only be enabled when/if Topologies are deployed in their own
                  namespace -- the reason for this is simple: if two Topologies exist in the same namespace
                  with a (containerlab) node named "my-router" there will be a conflicting Deployment and
                  Services for the "my-router" (containerlab) node. Note that this field is immutable! If you
                  want to change its value you need to delete the Topology and re-create it.
                enum:
                - prefixed
                - non-prefixed
                - global
                type: string
                x-kubernetes-validations:
                - message: naming field is immutable, to change this value delete
                    and re-create the Topology
                  rule: self == oldSelf
              statusProbes:
                description: |-
                  StatusProbes holds the configurations relevant to how clabernetes and the launcher handle
                  checking and reporting the containerlab node status
                properties:
                  enabled:
                    default: true
                    description: |-
                      Enabled sets the status probes to enabled (or obviously disabled). Note that if the probes
                      are enabled and the health condition fails due to configuring the node the cluster will
                      restart the node. So, if you plan on being destructive with the node config (probably because
                      you will have exec'd onto the node) then you may want to disable this!
                    type: boolean
                  excludedNodes:
                    description: |-
                      ExcludedNodes is a set of nodes to be excluded from status probe checking. It may be
                      desirable to exclude some node(s) from status checking due to them not having an easy way
                      for clabernetes to check the state of the node. The node names here should match the name of
                      the nodes in the containerlab sub-topology.
                    items:
                      type: string
                    type: array
                    x-kubernetes-list-type: atomic
                  nodeProbeConfigurations:
                    additionalProperties:
                      description: |-
                        ProbeConfiguration holds information about how to probe a (containerlab) node in a Topology. If
                        both style probes are configured, both will be used and both must succeed in order to report
                        healthy.
                      properties:
                        sshProbeConfiguration:
                          description: SSHProbeConfiguration defines an SSH probe.
                          properties:
                            password:
                              description: Password is the password to use for auth.
                              type: string
                            port:
                              description: Port is an optional override (of course
                                default is 22).
                              type: integer
                            username:
                              description: Username is the username to use for auth.
                              type: string
                          required:
                          - password
                          - username
                          type: object
                        startupSeconds:
                          description: |-
                            StartupSeconds is the total amount of seconds to allow for the node to start. This defaults
                            to ~13 minutes to hopefully account for slow to boot nodes. Note that there is also a 60
                            initial delay configured, so technically the default is ~14-15 minutes. Be careful with this
                            delay as there must be time for c9s to (via whatever means) pull the image and load it into
                            docker on the launcher and this can take a bit! Having this be bigger than you think you need
                            is generally better since if the startup probe succeeds ever then the readiness probe takes
                            over anyway.
                          type: integer
                        tcpProbeConfiguration:
                          description: TCPProbeConfiguration defines a TCP probe.
                          properties:
                            port:
                              description: |-
                                Port defines the port to try to open a TCP connection to. When using TCP probe setup this
                                connection happens inside the launcher rather than the "normal" k8s style probes. This style
                                probe behaves like a k8s style probe though in that it is "successful" whenever a TCP
                                connection to this port can be opened successfully.
                              type: integer
                          required:
                          - port
                          type: object
                      type: object
                    description: |-
                      NodeProbeConfigurations is a map of node specific probe configurations -- if you only need
                      a simple ssh or tcp connect style setup that works on all node types in the topology you can
                      ignore this and just configure ProbeConfiguration.
                    type: object
                  probeConfiguration:
                    description: ProbeConfiguration is the default probe configuration
                      for the Topology.
                    properties:
                      sshProbeConfiguration:
                        description: SSHProbeConfiguration defines an SSH probe.
                        properties:
                          password:
                            description: Password is the password to use for auth.
                            type: string
                          port:
                            description: Port is an optional override (of course default
                              is 22).
                            type: integer
                          username:
                            description: Username is the username to use for auth.
                            type: string
                        required:
                        - password
                        - username
                        type: object
                      startupSeconds:
                        description: |-
                          StartupSeconds is the total amount of seconds to allow for the node to start. This defaults
                          to ~13 minutes to hopefully account for slow to boot nodes. Note that there is also a 60
                          initial delay configured, so technically the default is ~14-15 minutes. Be careful with this
                          delay as there must be time for c9s to (via whatever means) pull the image and load it into
                          docker on the launcher and this can take a bit! Having this be bigger than you think you need
                          is generally better since if the startup probe succeeds ever then the readiness probe takes
                          over anyway.
                        type: integer
                      tcpProbeConfiguration:
                        description: TCPProbeConfiguration defines a TCP probe.
                        properties:
                          port:
                            description: |-
                              Port defines the port to try to open a TCP connection to. When using TCP probe setup this
                              connection happens inside the launcher rather than the "normal" k8s style probes. This style
                              probe behaves like a k8s style probe though in that it is "successful" whenever a TCP
                              connection to this port can be opened successfully.
                            type: integer
                        required:
                        - port
                        type: object
                    type: object
                type: object
            required:
            - definition
            - naming
            type: object
            x-kubernetes-validations:
            - message: naming is required once set
              rule: '!has(oldSelf.naming) || has(self.naming)'
          status:
            description: TopologyStatus is the status for a Topology resource.
            properties:
              conditions:
                description: Conditions is a list of conditions for the topology custom
                  resource.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-type: atomic
              configs:
                additionalProperties:
                  type: string
                description: |-
                  Configs is a map of node name -> containerlab config -- in other words, this is the original
                  Topology.Spec.Definition converted to containerlab "sub-topologies" The actual
                  "sub-topologies"/"sub-configs" are stored as a string -- this is the actual containerlab
                  topology that gets mounted in the launcher pod.
                type: object
              exposedPorts:
                additionalProperties:
                  description: ExposedPorts holds information about exposed ports.
                  properties:
                    loadBalancerAddress:
                      description: |-
                        LoadBalancerAddress holds the address assigned to the load balancer exposing ports for a
                        given node.
                      type: string
                    tcpPorts:
                      description: TCPPorts is a list of TCP ports exposed on the
                        LoadBalancer service.
                      items:
                        type: integer
                      type: array
                      x-kubernetes-list-type: set
                    udpPorts:
                      description: UDPPorts is a list of UDP ports exposed on the
                        LoadBalancer service.
                      items:
                        type: integer
                      type: array
                      x-kubernetes-list-type: set
                  required:
                  - loadBalancerAddress
                  - tcpPorts
                  - udpPorts
                  type: object
                description: |-
                  ExposedPorts holds a map of (containerlab not k8s!) nodes and their exposed ports
                  (via load balancer).
                type: object
              kind:
                description: Kind is the topology kind this CR represents -- this
                  will always be "containerlab".
                enum:
                - containerlab
                type: string
              nodeReadiness:
                additionalProperties:
                  type: string
                description: |-
                  NodeReadiness is a map of nodename to readiness status. The readiness status is as reported
                  by the k8s startup/readiness probe (which is in turn managed by the status probe
                  configuration of the topology). The possible values are "notready" and "ready", "unknown".
                type: object
              reconcileHashes:
                description: ReconcileHashes holds the hashes form the last reconciliation
                  run.
                properties:
                  config:
                    description: |-
                      Config is the last stored hash of the rendered config(s) -- that is, the map of "sub
                      topologies" representing the overall Topology.Spec.Definition.
                    type: string
                  exposedPorts:
                    description: |-
                      ExposedPorts is the last stored hash of the exposed ports mapping for this Topology. Note
                      that while we obviously care about the exposed ports on a *per node basis*, we don't need to
                      track that here -- this is here strictly to track differences in the load balancer service --
                      the actual sub-topologies (or sub-configs) effectively track the expose port status per node.
                    type: string
                  filesFromURL:
                    additionalProperties:
                      type: string
                    description: |-
                      FilesFromURL is the hash of the last stored mapping of files from URL (to node mapping). Note
                      that this is tracked on a *per node basis* because the URL of a file could be updated without
                      any change to the actual config/topology (or sub-config/sub-topology); as such we need to
                      explicitly track this per node to know when a node needs to be restarted such that the new
                      URL is "picked up" by the node/launcher.
                    type: object
                  imagePullSecrets:
                    description: ImagePullSecrets is the hash of hte last stored image
                      pull secrets for this Topology.
                    type: string
                required:
                - config
                - exposedPorts
                - filesFromURL
                - imagePullSecrets
                type: object
              removeTopologyPrefix:
                description: |-
                  RemoveTopologyPrefix holds the "resolved" value of the RemoveTopologyPrefix field -- that is
                  if it is unset (nil) when a Topology is created, the controller will use the default global
                  config value (false); if the field is non-nil, this status field will hold the non-nil value.
                type: boolean
              topologyReady:
                description: |-
                  TopologyReady indicates if all nodes in the topology have reported ready. This is duplicated
                  from the conditions so we can easily snag it for print columns!
                type: boolean
            required:
            - conditions
            - configs
            - exposedPorts
            - kind
            - nodeReadiness
            - reconcileHashes
            - removeTopologyPrefix
            - topologyReady
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
