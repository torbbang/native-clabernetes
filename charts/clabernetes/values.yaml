---
#
# global options
#
# note the yaml anchors, we use these to easily pass the same values to the clicker sub-chart (if
# enabling); there is no magic here other than yaml anchor magic, if you expect the "global" things
# to be really global and applied to the clicker (or any other future) dependency then use anchors
# or pass things explicitly. this felt better than using actual helm "globals"
#

appName: &_appName clabernetes

# extra labels/annotations that are added to all objects
globalAnnotations: &_globalAnnotations {}
globalLabels: &_globalLabels {}
globalTolerations: &globalTolerations []


#
# manager options
#
# the manager is the c9s controller
#
manager:
  deploymentAnnotations: {}
  deploymentLabels: {}
  deploymentTolerations: []
  podAnnotations: {}
  podLabels: {}

  # defaults to .Chart.Version, if 0.0.0 version defaults to 'dev-latest' tag
  image: "" # ghcr.io/srl-labs/clabernetes/clabernetes-manager:{{ .Chart.Version }}
  imagePullPolicy: IfNotPresent

  replicaCount: 3
  resources:
    requests:
      memory: 128Mi
      cpu: 50m
    limits: {}

  clientOperationTimeoutMultiplier: 1
  managerLogLevel: info
  controllerLogLevel: info

  # pod affinity settings, directly inserted into manager deployment spec; if not provided basic
  # common-sense anti-affinity is applied.
  affinity: {}

#
# global config
#
# disable this if you are using argocd/flux -- in that case you should probably manage a single
# manifest file with the config singleton and your configs in it. otherwise, this will be deployed
# into a configmap, which will then be processed by init containers in the manager deployment. the
# init containers will take this data and merge the configs into the global config custom resource
# singleton. once complete, the configmap will be deleted (hence why you don't want this if you are
# using argocd/flux). the idea here is this makes helm deploys simple, while still giving us the
# ability to add fields to the CR (without versioning) without helm having a heart attack. we delete
# the configmap after merging because we don't want there to be any ambiguity about where to config
# global things (that should only be in the CR singleton). note that the `mergeMode` will define
# how this config data is merged into an existing config CR singleton.
#
globalConfig:
  enabled: true

  # can be "merge" or "overwrite" -- if "merge" any values from this bootstrap config data *not*
  # present in a potentially existing global config CR are copied over to the CR, while any data
  # that is already set in the CR is left alone. This is the default and "safe" option. You can
  # also set this to "overwrite" for a more declarative option where this bootstrap config data
  # replaces the existing CR entirely.
  #
  # note: bool values are completely ignored in "merge" mode as we do *not* have pointers to bools
  # in the config CR; put another way, the bool values (ex: deployment.privilegedLauncher) are
  # totally ignored in merge mode. if you want to update those values in the config CR you can do
  # so directly, or use the "overwrite" merge mode.
  mergeMode: merge

  inClusterDNSSuffix: svc.cluster.local

  imagePull:
    # imagePullThroughMode defines how the launcher pod tries to pull the image specified in the
    # topology. The options are: "auto" (default), "always", "never". The "auto" option will
    # instruct the manager to mount the CRI socket in the launcher pods, and the launcher to always
    # try to pull via the CRI first; if this fails for some reason, the launcher will try to pull
    # via the docker daemon in the launcher pod itself. "always" indicates the launcher should
    # "always" (*only*) ever pull from the CRI socket -- if the CRI is determined (by the manager)
    # to *not* be homogenous at manager start time (not all nodes in cluster are the same CRI type),
    # then this mode will cause the launcher to fail since it won't be setup to pull via the CRI
    # (and in this mode it *only* pulls via the CRI). Lastly, "never" means the launcher should only
    # ever pull via the docker daemon in the launcher pod itself (bypassing the cluster). Note that
    # "pull through mode" currently only supports containerd as a CRI.
    imagePullThroughMode: auto
    # criSockOverride allows for overriding the path of the CRI sock that is mounted in the
    # launcher pods (if/when image pull through mode is auto or always). This can be useful if,
    # for example, the CRI sock is in a "non-standard" location like K3s which puts the containerd
    # sock at `/run/k3s/containerd/containerd.sock` rather than the "normal" (whatever that means)
    # location of `/run/containerd/containerd.sock`.
    # criSockOverride: ""
    # criKindOverride allows for overriding teh auto discovered cri kind. Probably/hopefully this
    # won't be needed often, but could come in handy in multi-cri clusters or if nodes for some
    # reason do not properly report their cri flavor (or we incorrectly parse it?!)
    # criKindOverride: ""

  deployment:
    # resourcesDefault hold the default resources to apply to clabernetes launcher pods.
    # for reference fields should be formatted like "normal" k8s resources:
    # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#example-1
    resourcesDefault:
      requests:
        memory: 512Mi
        cpu: 200m

    # resourcesByContainerlabKind is a mapping of containerlab kind/type -> k8s resources/requests
    # to apply to the launcher pod(s). this expects a normal looking k8s requests/limits block.
    # the "resourcesByContainerlabKind" key holds a map[string]map[string]k8sresource mapping -- the
    # outer keys are the containerlab *kind* and the inner keys *type* -- you can specify a
    # "default" key in the types level as well to just have default resources for a given kind.
    resourcesByContainerlabKind: {}

    # nodeSelectorsByImage is a mapping of image glob patterns (as key) and node label and value
    # pairs (as value) to apply to the launcher pod(s) as K8s NodeSelectors.
    # Note that in case of multiple matches the longest (with most characters) will take
    # precedence. E.g:
    # {
    #  "internal.io/nokia_sros*": {"node-flavour": "baremetal"},
    #  "ghcr.io/nokia/srlinux*":  {"node-flavour": "amd64"},
    #  "default":                 {"node-flavour": "cheap"},
    # }
    # The "nodeSelectorsByImage" key holds a map[string]map[string]string.
    nodeSelectorsByImage: {}

    # privilegedLauncher sets the global default value for "privilegedLauncher" -- that is, if the
    # launcher pods should run in privileged mode or not.
    privilegedLauncher: true

    # containerlabDebug sets the global default value for whether launcher pods should have the
    # containerlab debug flag set.
    containerlabDebug: false

    # containerlabTimeout sets the global default value for the containerlab timeout value that the
    # launcher pods should use.
    containerlabTimeout: ""

    # default image for launcher deployments; if not set here, manager will have this set to a sane
    # default as an env var that will be applied (this follows same patter as the manager image
    # itself), so this is here just if you want to override that yourself.
    launcherImage: ""
    launcherImagePullPolicy: IfNotPresent
    launcherLogLevel: info

    # specifying a "custom" containerlab version will cause launcher pods to download and use this
    # version of containerlab. generally don't set this unless you need to.
    containerlabVersion: ""

    # extraEnv is a list of k8scorev1.EnvVar that will be set on any launcher pods. Note that any
    # configured global config env vars will be ignored if a Topology has an extraEnv config.
    extraEnv: []

  # name is the global setting that governs a Topology's "naming" field when set to "global".
  # valid options are "prefixed" or "non-prefixed", see the api types for more detail.
  naming: prefixed


