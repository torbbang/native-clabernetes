---
version: v2beta1
name: clabernetes

vars:
  DEVSPACE_FLAGS: "-n clabernetes"

  REGISTRY:
    source: env
    default: ghcr.io/srl-labs/clabernetes

  PULL_POLICY: IfNotPresent

  CLABERNETES: clabernetes
  IMAGE_BASE: ${REGISTRY}/${CLABERNETES}
  MANAGER_IMAGE: ${REGISTRY}/${CLABERNETES}-manager
  MANAGER_DEV_IMAGE: ${MANAGER_IMAGE}-dev
  LAUNCHER_IMAGE: ${REGISTRY}/${CLABERNETES}-launcher
  CLABVERTER_IMAGE: ${REGISTRY}/clabverter

  # always build w/ 0.0.0 -- overridden for actual releases by release profile. for "normal" builds
  # (not releases) we'll do VERSION-HASH, for releases we'll just override to have version tag.
  VERSION: 0.0.0
  COMMIT_HASH: $(git describe --always --abbrev=8)

  # to be set in ci
  RELEASE_VERSION: ""

  CLABERNETES_DEV_DOMAIN:
    source: env
    default: containerlab.dev

localRegistry:
  enabled: false

images:
  clabernetes-dev:
    createPullSecret: false
    image: ${MANAGER_DEV_IMAGE}
    context: ../
    dockerfile: dev.Dockerfile
    rebuildStrategy: ignoreContextChanges
    buildKit: {}
    tags:
      - ${COMMIT_HASH}

  clabernetes:
    createPullSecret: false
    image: ${MANAGER_IMAGE}
    context: ../
    dockerfile: ../build/manager.Dockerfile
    rebuildStrategy: ignoreContextChanges
    buildArgs:
      VERSION: ${VERSION}-${COMMIT_HASH}
    buildKit: {}
    tags:
      - dev-latest
      - ${COMMIT_HASH}

  clabernetes-launcher:
    createPullSecret: false
    image: ${LAUNCHER_IMAGE}
    context: ../
    dockerfile: ../build/launcher.Dockerfile
    rebuildStrategy: ignoreContextChanges
    buildArgs:
      VERSION: ${VERSION}-${COMMIT_HASH}
    buildKit: {}
    tags:
      - dev-latest
      - ${COMMIT_HASH}


  clabverter:
    createPullSecret: false
    image: ${CLABVERTER_IMAGE}
    context: ../
    dockerfile: ../build/clabverter.Dockerfile
    rebuildStrategy: ignoreContextChanges
    buildArgs:
      VERSION: ${VERSION}-${COMMIT_HASH}
    buildKit: {}
    tags:
      - dev-latest
      - ${COMMIT_HASH}

deployments:
  clabernetes:
    helm:
      displayOutput: true
      chart:
        name: ../charts/clabernetes
      values:
        manager:
          image: ${MANAGER_IMAGE}
          imagePullPolicy: ${PULL_POLICY}
        globalConfig:
          deployment:
            launcherImage: ${LAUNCHER_IMAGE}
            launcherImagePullPolicy: ${PULL_POLICY}
        clicker:
          image: ${MANAGER_IMAGE}
          imagePullPolicy: ${PULL_POLICY}

dev:
  clabernetes:
    labelSelector:
      clabernetes/app: clabernetes
      clabernetes/component: manager
    container: manager
    devImage: ${MANAGER_DEV_IMAGE}
    sync:
      - path: ../.develop/:/clabernetes/.develop/
        disableDownload: true
      - path: ../:/clabernetes/
        disableDownload: true
        excludeFile: .dockerignore
    terminal:
      command: .develop/start.sh

profiles:
  - name: dev
    patches:
      - op: add
        path: deployments.clabernetes.helm.values.ui
        value:
          enabled: true
          ingress:
            enabled: true
            host: ui.clabernetes.${CLABERNETES_DEV_DOMAIN}

  - name: debug
    patches:
      - op: add
        path: deployments.clabernetes.helm.values.manager.managerLogLevel
        value: debug
      - op: add
        path: deployments.clabernetes.helm.values.manager.controllerLogLevel
        value: debug
      - op: add
        path: deployments.clabernetes.helm.values.globalConfig.deployment.launcherLogLevel
        value: debug

  - name: single-manager
    patches:
      - op: add
        path: deployments.clabernetes.helm.values.manager.replicaCount
        value: 1


  # for development using devspace on "non-local" clusters (meaning *not* kind/docker-desktop/
  # minikube/maybe others) you will want to have Always for image pull so launcher and clicker pick
  # up the new image -- you may even want always pull on manager so the manager dev image is pulled;
  # conversely, for the "local" clusters you *don't* want this because you want to use the image
  # that you loaded (i.e `kind load docker-image`) to the cluster.
  - name: always-pull
    patches:
      - op: replace
        path: deployments.clabernetes.helm.values.manager.imagePullPolicy
        value: Always
      - op: replace
        path: deployments.clabernetes.helm.values.globalConfig.deployment.launcherImagePullPolicy
        value: Always
      - op: replace
        path: deployments.clabernetes.helm.values.clicker.imagePullPolicy
        value: Always

  - name: release
    patches:
      - op: replace
        path: images.clabernetes.tags
        value:
          - latest
          - ${RELEASE_VERSION}
          - ${COMMIT_HASH}
      - op: replace
        path: images.clabernetes.buildArgs.VERSION
        value: ${RELEASE_VERSION}

      - op: replace
        path: images.clabernetes-launcher.tags
        value:
          - latest
          - ${RELEASE_VERSION}
          - ${COMMIT_HASH}
      - op: replace
        path: images.clabernetes-launcher.buildArgs.VERSION
        value: ${RELEASE_VERSION}


      - op: replace
        path: images.clabverter.tags
        value:
          - latest
          - ${RELEASE_VERSION}
          - ${COMMIT_HASH}
      - op: replace
        path: images.clabverter.buildArgs.VERSION
        value: ${RELEASE_VERSION}

  # custom-release is used for "one off" releases where we want to build and push images with some
  # tag that is not one of the normal tags -- something like "0.0.0-customFixTest1"
  - name: custom-release
    patches:
      - op: replace
        path: images.clabernetes.tags
        value:
          - ${RELEASE_VERSION}
      - op: replace
        path: images.clabernetes.buildArgs.VERSION
        value: ${RELEASE_VERSION}

      - op: replace
        path: images.clabernetes-launcher.tags
        value:
          - ${RELEASE_VERSION}
      - op: replace
        path: images.clabernetes-launcher.buildArgs.VERSION
        value: ${RELEASE_VERSION}


      - op: replace
        path: images.clabverter.tags
        value:
          - ${RELEASE_VERSION}
      - op: replace
        path: images.clabverter.buildArgs.VERSION
        value: ${RELEASE_VERSION}

pipelines:
  build:
    # override the default build pipeline so we don't bother building dev image in ci
    run: |
      build_images clabernetes clabernetes-launcher clabverter

  dev:
    # override the default dev pipeline to not bother building clabverter while doing dev things
    run: |
      build_images clabernetes-dev clabernetes clabernetes-launcher
      create_deployments --all
      start_dev --all

  deploy:
    # override the default dev pipeline to not bother building clabverter or dev image while doing
    # deploy pipeline
    run: |
      run_dependencies --all
      build_images clabernetes clabernetes-launcher
      create_deployments --all

  purge:
    run: |-
      stop_dev --all
      purge_deployments --all
      kubectl delete leases -n ${DEVSPACE_NAMESPACE} \
        $(kubectl get leases -n ${DEVSPACE_NAMESPACE} 2> /dev/null | grep "clabernetes" | awk '{print $1}') 2> /dev/null || true
      kubectl delete crds \
        $(kubectl get crds 2> /dev/null | grep "clabernetes" | awk '{print $1}') 2> /dev/null || true
